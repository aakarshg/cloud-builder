---
- name: Deploy
  block:
    - name: setting cluster number
      set_fact:
        cluster_number: "{{ item }}"

    - name: create configmap for postgres
      k8s:
        definition: "{{ lookup('template', 'configmap.yaml.j2') }}"

    - name: create service for postgres
      k8s:
        definition: "{{ lookup('template', 'postgres-service.yaml.j2') }}"

    - name: create statefulset for Postgres
      k8s:
        definition: "{{ lookup('template', 'postgres-sfset.yaml.j2') }}"

    - name: Wait for the pods to be up
      k8s_facts:
        kind: Pod
        api_version: v1
        namespace: '{{ operator_namespace }}'
        label_selectors:
          - role = postgres
      register: server_pods
      until: "(postgres.cluster_size * (cluster_number|int + 1))  == (server_pods | json_query('resources[].status.podIP')|length)"
      retries: 10
      delay: 10
  when: teardown is undefined

- name: Cleanup
  block:
    - name: delete all pvcs created
      k8s_facts:
        kind: PersistentVolumeClaim
        namespace: "{{ operator_namespace }}"
        label_selectors:
          - role=postgres
      register: postgres_pvcs

    - name: Destroy the pvcs created
      k8s:
        kind: PersistentVolumeClaim
        namespace: "{{ operator_namespace }}"
        name: "{{ item.metadata.name }}"
        state: absent
      with_items: "{{ postgres_pvcs.resources }}"
  when: teardown is defined
