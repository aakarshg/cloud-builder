---
# Plays common to the Deploy and Destroy blocks are first
#- name: My Task
#    k8s:
#      src:


# Deploy block is run as long as the finalizer has not set teardown=true
- name: Deploy
  when: teardown is undefined
  block:

  - name: Deploy couchbase operator
    k8s:
      definition: "{{ lookup('template', 'couchbase-operator.yaml.j2') }}"

  - name: Get couchbase operator CSV
    k8s_facts:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      namespace: "{{ operator_namespace }}"
    register: csvs
    retries: 10
    delay: 5

  - name: Wait for Couchbase Operator to be Running....
    #FIXME: Some versions of the operator use an "app" label and others use a "name" label.
    #       I can't find a way to check label_selectors based on an OR of the key, and the 
    #       field_selectors I might match on are not supported. It's also not supported to
    #       loop over a block with an until, so that solution won't work. I also can't find
    #       a way to inject a new label to use into the operator pod as it is being created
    #       by the subscription. ¯\_(ツ)_/¯
    #k8s_facts:
    #  api_version: operators.coreos.com/v1alpha1
    #  kind: ClusterServiceVersion
    #  namespace: "{{ operator_namespace }}"
    #  name: "{{ item.metadata.name }}"
    #register: cb_op_pod
    #until: "'Running' in (cb_op_pod | json_query('resources[].status.phase'))"
    #with_items: "{{ csvs.resources }}"
    #retries: 10
    #delay: 10
    pause:
      seconds: 100

  # For BZ 1678285
  # https://bugzilla.redhat.com/show_bug.cgi?id=1678285
  - name: Apply RBAC for couchbase operator
    k8s:
      definition: "{{ lookup('template', 'couchbase-operator-rbac.yaml.j2') }}"

  - name: Create the Couchbase Auth Secret
    k8s:
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: cb-cluster-auth
          namespace: "{{ operator_namespace }}"
        type: Opaque
        data:
          username: QWRtaW5pc3RyYXRvcg==
          password: cGFzc3dvcmQ=

  # Pre-pull the image to avoid CB operator timeout
  - name: Pre-Pull Couchbase Container Image
    k8s:
      definition:
        kind: Job
        apiVersion: batch/v1
        metadata:
          name: cb-image-load
          namespace: "{{ operator_namespace }}"
        spec:
          template:
            spec:
              containers:
                - name: cb-image-load
                  image: "{{ pod_base_image }}:{{ pod_version }}"
                  command: ['/bin/true']
              restartPolicy: Never
              imagePullSecrets:
                - name: "{{ pull_secret_name }}"
          backoffLimit: 4

  - name: Wait for Pre-Pull Job to Succeed
    k8s_facts:
      kind: Job
      api_version: batch/v1
      namespace: "{{ operator_namespace }}"
      name: cb-image-load
    register: cb_image_load
    until: "cb_image_load | json_query('resources[].status.succeeded')"
    retries: 60
    delay: 10

  - name: Launch Couchbase Cluster via Operator
    k8s:
      definition: "{{ lookup('template', 'couchbase-cluster.yaml.j2') }}"

  - name: Wait for Couchbase Cluster to be Up; This may take a while...
    k8s_facts:
      kind: CouchbaseCluster
      api_version: couchbase.com/v1
      namespace: "{{ operator_namespace }}"
      name: cb-benchmark
    register: cbc
    until: cbc | json_query('resources[].status.conditions.Available.status') and cbc | json_query('resources[].status.members.ready[]') | length == couchbase.servers.size
    #60 retries with 10 second delays should result in a 10 minute wait time
    retries: 60
    delay: 10

  # For use with YCSB, the username must match the bucket name
  # See https://github.com/brianfrankcooper/YCSB/issues/1062#issuecomment-344716601
  - name: Set Password for the Default Bucket
    uri:
      url: "http://cb-benchmark.{{ operator_namespace }}.svc.cluster.local:8091/settings/web"
      method: POST
      # This is the default couchbase admin user/pass
      user: Administrator
      password: password
      body_format: form-urlencoded
      body:
        username: default
        password: "{{ default_bucket_password }}"
        port: 8091

  - name: Set Couchbase Service Hostname
    set_fact:
      couchbase_hostname: "cb-benchmark.{{ operator_namespace }}.svc.cluster.local"

  - name: Globalize Default Bucket Password Variable
    set_fact:
      default_bucket_password: "{{ default_bucket_password }}"


# Destroy block is run when the finalizer has set teardown=true
- name: Destroy
  when: teardown is defined
  block:

  - name: Get pre-pull pod
    k8s_facts:
      kind: Pod
      namespace: "{{ operator_namespace }}"
      label_selectors:
        - job-name = cb-image-load
    register: img_pod

  - name: Destroy pre-pull pod
    k8s:
      kind: Pod
      namespace: "{{ operator_namespace }}"
      name: "{{ item.metadata.name }}"
      state: absent
    with_items: "{{ img_pod.resources }}"

  - name: Destroy couchbase cluster via operator
    k8s:
      definition: "{{ lookup('template', 'couchbase-cluster.yaml.j2') }}"
      state: absent

  - name: Get couchbase operator CSV
    k8s_facts:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      namespace: "{{ operator_namespace }}"
    register: csvs

  - name: Destroy couchbase operator CSV
    k8s:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      namespace: "{{ operator_namespace }}"
      name: "{{ item.metadata.name }}"
      state: absent
    with_items: "{{ csvs.resources }}"
    when: "'couchbase' in item.metadata.name"

  - name: Destroy RBAC for couchbase operator
    k8s:
      definition: "{{ lookup('template', 'couchbase-operator-rbac.yaml.j2') }}"
      state: absent

  - name: Get couchbase cluster endpoints
    k8s_facts:
      kind: Endpoint
      namespace: "{{ operator_namespace }}"
    register: endpoints

  - name: Destroy couchbase cluster endpoints
    k8s:
      kind: Endpoint
      namespace: "{{ operator_namespace }}"
      name: "{{ item.metadata.name }}"
      state: absent
    with_items: "{{ endpoints.resources }}"
    when: '"couchbase" in item.metadata.name'
